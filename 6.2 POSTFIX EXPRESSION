#include <stdio.h>
#include <stdlib.h>
#include <stdbool.h>
#include <string.h>
#include <ctype.h>

#define MAX_SIZE 100


struct Stack {
    int top;
    int data[MAX_SIZE];
};


void initialize(struct Stack *stack) {
    stack->top = -1;
}

bool isEmpty(struct Stack *stack) {
    return stack->top == -1;
}

bool isFull(struct Stack *stack) {
    return stack->top == MAX_SIZE - 1;
}

void push(struct Stack *stack, int value) {
    if (!isFull(stack)) {
        stack->data[++stack->top] = value;
    } else {
        printf("Stack overflow!\n");
    }
}

int pop(struct Stack *stack) {
    if (!isEmpty(stack)) {
        return stack->data[stack->top--];
    } else {
        printf("Stack underflow!\n");
        return -1; 
    }
}


int evaluatePostfix(char *expression) {
    struct Stack stack;
    initialize(&stack);
    int len = strlen(expression);

    for (int i = 0; i < len; i++) {
        if (isdigit(expression[i])) {
            push(&stack, expression[i] - '0');
        } else {
            int operand2 = pop(&stack);
            int operand1 = pop(&stack);
            switch (expression[i]) {
                case '+':
                    push(&stack, operand1 + operand2);
                    break;
                case '-':
                    push(&stack, operand1 - operand2);
                    break;
                case '*':
                    push(&stack, operand1 * operand2);
                    break;
                case '/':
                    push(&stack, operand1 / operand2);
                    break;
                default:
                    printf("Invalid operator\n");
                    return -1;
            }
        }
    }

    return pop(&stack);
}

int main() {
	printf("VIJAYALAKSHMI G,192321080\n");
    char postfix_expression[] = "44 2 / 6 -";
    int result = evaluatePostfix(postfix_expression);
    if (result != -1) {
        printf("Result: %d\n", result);
    }

    return 0;
}
