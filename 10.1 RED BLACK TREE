#include <stdio.h>
#include <stdlib.h>
enum Color { RED, BLACK };
struct Node
{
    int data;
    enum Color color;
    struct Node *left, *right, *parent;
};


struct Node *createNode(int data)
{
    struct Node *newNode = (struct Node *)malloc(sizeof(struct Node));
    newNode->data = data;
    newNode->left = newNode->right = newNode->parent = NULL;
    newNode->color = RED;
    return newNode;
}


void leftRotate(struct Node **root, struct Node *x)
{
    struct Node *y = x->right;
    x->right = y->left;
    if (y->left != NULL)
        y->left->parent = x;
    y->parent = x->parent;
    if (x->parent == NULL)
        *root = y;
    else if (x == x->parent->left)
        x->parent->left = y;
    else
        x->parent->right = y;
    y->left = x;
    x->parent = y;
}


void rightRotate(struct Node **root, struct Node *y)
{
    struct Node *x = y->left;
    y->left = x->right;
    if (x->right != NULL)
        x->right->parent = y;
    x->parent = y->parent;
    if (y->parent == NULL)
        *root = x;
    else if (y == y->parent->left)
        y->parent->left = x;
    else
        y->parent->right = x;
    x->right = y;
    y->parent = x;
}


void fixViolation(struct Node **root, struct Node *newNode) {
    struct Node *parent = NULL;
    struct Node *grandparent = NULL;

    while ((newNode != *root) && (newNode->color != BLACK) &&
           (newNode->parent->color == RED)) {
        parent = newNode->parent;
        grandparent = newNode->parent->parent;
        if (parent == grandparent->left) {
            struct Node *uncle = grandparent->right;
            if (uncle != NULL && uncle->color == RED) {
                grandparent->color = RED;
                parent->color = BLACK;
                uncle->color = BLACK;
                newNode = grandparent;
            }
            else
            {
                if (newNode == parent->right)
                {
                    leftRotate(root, parent);
                    newNode = parent;
                    parent = newNode->parent;
                }
                rightRotate(root, grandparent);
                enum Color temp = parent->color;
                parent->color = grandparent->color;
                grandparent->color = temp;
                newNode = parent;
            }
        }
        else
        {
            struct Node *uncle = grandparent->left;
            if ((uncle != NULL) && (uncle->color == RED))
            {
                grandparent->color = RED;
                parent->color = BLACK;
                uncle->color = BLACK;
                newNode = grandparent;
            }
            else
            {

                if (newNode == parent->left)
                {
                    rightRotate(root, parent);
                    newNode = parent;
                    parent = newNode->parent;
                }
                leftRotate(root, grandparent);
                enum Color temp = parent->color;
                parent->color = grandparent->color;
                grandparent->color = temp;
                newNode = parent;
            }
        }
    }
    (*root)->color = BLACK;
}
void insert(struct Node **root, int data)
{
    struct Node *newNode = createNode(data);
    struct Node *parent = NULL;
    struct Node *temp = *root;
    while (temp != NULL)
    {
        parent = temp;
        if (newNode->data < temp->data)
            temp = temp->left;
        else
            temp = temp->right;
    }
    newNode->parent = parent;
    if (parent == NULL)
        *root = newNode;
    else if (newNode->data < parent->data)
        parent->left = newNode;
    else
        parent->right = newNode;

    fixViolation(root, newNode);
}
void inorder(struct Node *root)
{
    if (root == NULL)
        return;
    inorder(root->left);
    printf("%d ", root->data);
    inorder(root->right);
}

int main()
{
    printf("red black tree\n");
    printf("VIJAYALAKSHMI G,192321080\n");
    struct Node *root = NULL;
    insert(&root, 8);
    insert(&root, 18);
    insert(&root, 5);
    insert(&root, 15);
    insert(&root, 17);
    insert(&root, 25);
    insert(&root, 40);
    insert(&root, 80);
    printf("Inorder traversal of the Red-Black Tree: ");
    inorder(root);
    return 0;
}
