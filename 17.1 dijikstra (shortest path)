#include <stdio.h>
#include <stdlib.h>
#include <limits.h>
#define V 5
void dijkstra(int graph[V][V], int source);
int main() {
    int graph[V][V] =
    {
        {0, 2, 0, 6, 0},
        {0, 0, 3, 8, 5},
        {0, 0, 0, 0, 7},
        {0, 0, 0, 0, 9},
        {0, 0, 0, 0, 0}
    };
    int source;
    printf("VIJAYALAKSHMI G,192321080\n");
    printf("Enter the source vertex (0 to %d): ", V - 1);
    scanf("%d", &source);
    dijkstra(graph, source);
    return 0;
}
int minDistance(int dist[], int sptSet[])
{
    int min = INT_MAX, min_index;

    for (int v = 0; v < V; v++)
    {
        if (sptSet[v] == 0 && dist[v] <= min)
        {
            min = dist[v];
            min_index = v;
        }
    }

    return min_index;
}
void printSolution(int dist[])
{
    printf("Vertex   Distance from Source\n");
    for (int i = 0; i < V; i++)
        printf("%d         %d\n", i, dist[i]);
}
void dijkstra(int graph[V][V], int source)
{
    int dist[V];
    int sptSet[V];
    for (int i = 0; i < V; i++)
    {
        dist[i] = INT_MAX;
        sptSet[i] = 0;
    }
    dist[source] = 0;
    for (int count = 0; count < V - 1; count++)
    {
        int u = minDistance(dist, sptSet);
        sptSet[u] = 1;
        for (int v = 0; v < V; v++)
        {
            if (!sptSet[v] && graph[u][v] && dist[u] != INT_MAX && dist[u] + graph[u][v] < dist[v])
                dist[v] = dist[u] + graph[u][v];
        }
    }
    printSolution(dist);
}
