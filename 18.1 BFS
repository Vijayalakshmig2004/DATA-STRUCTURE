#include <stdio.h>
#include <stdbool.h>

#define MAX_VERTICES 100
struct Queue
{
    int items[MAX_VERTICES];
    int front, rear;
};

void initializeQueue(struct Queue* queue)
{
    queue->front = -1;
    queue->rear = -1;
}
bool isEmpty(struct Queue* queue)
{
    return (queue->front == -1);
}
void enqueue(struct Queue* queue, int vertex)
{
    if (queue->rear == MAX_VERTICES - 1)
    {
        printf("Queue overflow!\n");
        return;
    }

    if (isEmpty(queue))
    {
        queue->front = 0;
    }

    queue->items[++(queue->rear)] = vertex;
}
int dequeue(struct Queue* queue)
{
    if (isEmpty(queue))
    {
        return -1;
    }

    int frontItem = queue->items[queue->front];
    if (queue->front == queue->rear)
    {
        queue->front = queue->rear = -1;
    }
    else
    {
        (queue->front)++;
    }

    return frontItem;
}
struct Graph
{
    int vertices;
    int adjMatrix[MAX_VERTICES][MAX_VERTICES];
};
void initializeGraph(struct Graph* graph, int vertices)
{
    graph->vertices = vertices;
    for (int i = 0; i < MAX_VERTICES; i++)
    {
        for (int j = 0; j < MAX_VERTICES; j++)
        {
            graph->adjMatrix[i][j] = 0;
        }
    }
}
void addEdge(struct Graph* graph, int src, int dest)
{
    graph->adjMatrix[src][dest] = 1;
    graph->adjMatrix[dest][src] = 1;
}
void bfs(struct Graph* graph, int startVertex)
{
    bool visited[MAX_VERTICES] = {false};
    struct Queue queue;
    initializeQueue(&queue);
    visited[startVertex] = true;
    enqueue(&queue, startVertex);

    printf("Breadth-First Search starting from vertex %d:\n", startVertex);

    while (!isEmpty(&queue))
    {
        int currentVertex = dequeue(&queue);
        printf("%d ", currentVertex);
        for (int i = 0; i < graph->vertices; i++)
        {
            if (graph->adjMatrix[currentVertex][i] == 1 && !visited[i])
            {
                visited[i] = true;
                enqueue(&queue, i);
            }
        }
    }

    printf("\n");
}

int main()
{
    printf("BFS \n");
    printf("vijayalakshmi G , 192321080\n");
    printf("\n");
    struct Graph graph;
    initializeGraph(&graph, 5);

    addEdge(&graph, 0, 1);
    addEdge(&graph, 0, 2);
    addEdge(&graph, 1, 3);
    addEdge(&graph, 1, 4);

    bfs(&graph, 0);

    return 0;
}
