#include <stdio.h>
#include <stdlib.h>

struct Node
{
    int data;
    struct Node* next;
};

struct Node* head = NULL;

struct Node* createNode(int newData) 
{
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    if (newNode == NULL) 
    {
        printf("Memory allocation failed\n");
        exit(1);
    }
    newNode->data = newData;
    newNode->next = NULL;
    return newNode;
}


void displayCircularLinkedList() 
{
    if (head == NULL)
    {
        printf("Singly Circular Linked List is empty\n");
        return;
    }
    struct Node* current = head;
    printf("Singly Circular Linked List: ");
    do {
        printf("%d -> ", current->data);
        current = current->next;
    } while (current != head);
    printf("Head\n");
}



void insertAtBeginning(int newData)
{
    struct Node* newNode = createNode(newData);
    if (head == NULL) 
    {
        head = newNode;
        newNode->next = head;
    } 
    else 
    {
        struct Node* current = head;
        while (current->next != head) 
        {
            current = current->next;
        }
        newNode->next = head;
        head = newNode;
        current->next = head;
    }
}



void insertAtEnd(int newData) 
{
    struct Node* newNode = createNode(newData);
    if (head == NULL) 
    {
        head = newNode;
        newNode->next = head;
    } 
    else 
    {
        struct Node* current = head;
        while (current->next != head) 
        {
            current = current->next;
        }
        newNode->next = head;
        current->next = newNode;
    }
}



void insertAtMiddle(int newData, int position) 
{
    if (head == NULL || position <= 1) 
    {
        insertAtBeginning(newData);
        return;
    }

    struct Node* newNode = createNode(newData);
    struct Node* current = head;
    int count = 1;

    while (count < position - 1 && current->next != head) 
    {
        current = current->next;
        count++;
    }

    newNode->next = current->next;
    current->next = newNode;
}

void deleteAtBeginning() 
{
    if (head == NULL) 
    {
        printf("Singly Circular Linked List is empty\n");
        return;
    }
    struct Node* temp = head;
    struct Node* current = head;

    while (current->next != head) 
    {
        current = current->next;
    }

    if (head->next == head) 
    {
        head = NULL;
    } 
    else 
    {
        head = head->next;
        current->next = head;
    }
    free(temp);
}



void deleteAtEnd() 
{
    if (head == NULL) 
    {
        printf("Singly Circular Linked List is empty\n");
        return;
    }
    struct Node* current = head;
    struct Node* prev = NULL;

    while (current->next != head)
    {
        prev = current;
        current = current->next;
    }

    if (head->next == head)
    {
        head = NULL;
    } 
    else 
    {
        prev->next = head;
    }
    free(current);
}



void deleteAtPosition(int position) 
{
    if (head == NULL) 
    {
        printf("Singly Circular Linked List is empty\n");
        return;
    }
    struct Node* temp = head;
    struct Node* current = head;
    struct Node* prev = NULL;
    int count = 1;

    do {
        prev = current;
        current = current->next;
        count++;
    } while (current != head && count < position);

    if (current == head) 
    {
        printf("Position not found\n");
        return;
    }

    prev->next = current->next;

    if (current == head) 
    {
        head = head->next;
    }
    free(current);
}





void search(int searchData)
{
    if (head == NULL) 
    {
        printf("Singly Circular Linked List is empty\n");
        return;
    }
    struct Node* current = head;
    int found = 0;

    do {
        if (current->data == searchData) 
        
        {
            found = 1;
            printf("Element %d found\n", searchData);
            break;
        }
        current = current->next;
    } while (current != head);
    if (!found) 
    {
        printf("Element %d not found\n", searchData);
    }
}



void swapData(struct Node* a, struct Node* b) 
{
    int temp = a->data;
    a->data = b->data;
    b->data = temp;
}

void sort() 
{
    if (head == NULL) 
    {
        printf("Singly Circular Linked List is empty\n");
        return;
    }
    struct Node* current = head;
    struct Node* index = NULL;

    do {
        index = current->next;
        while (index != head) 
        {
            if (current->data > index->data) 
            {
                swapData(current, index);
            }
            index = index->next;
        }
        current = current->next;
    } while (current != head);
}






void findMax() 
{
    if (head == NULL) 
    {
        printf("Singly Circular Linked List is empty\n");
        return;
    }
    struct Node* current = head;
    int max = current->data;

    do {
        if (current->data > max) 
        {
            max = current->data;
        }
        current = current->next;
    } while (current != head);

    printf("Maximum value in the list: %d\n", max);
}



void findMin() 
{
    if (head == NULL) 
    {
        printf("Singly Circular Linked List is empty\n");
        return;
    }
    struct Node* current = head;
    int min = current->data;

    do {
        if (current->data < min) 
        {
            min = current->data;
        }
        current = current->next;
    } while (current != head);

    printf("Minimum value in the list: %d\n", min);
}



int main() 
{
    printf("IMPLEMENT SCLL\n");
    printf("VIJAYALAKSHMI.G , 192321080\n");
    int choice, data, position;

    do {
        printf("\n1. Insert at Beginning\n");
        printf("2. Insert at Middle\n");
        printf("3. Insert at End\n");
        printf("4. Delete at Beginning\n");
        printf("5. Delete at Middle\n");
        printf("6. Delete at End\n");
        printf("7. Display\n");
        printf("8. Search\n");
        printf("9. Sort\n");
        printf("10. Find Max\n");
        printf("11. Find Min\n");
        printf("12. Exit\n");
        printf("Enter your choice: ");
        scanf("%d", &choice);

        switch (choice) {
            case 1:
                printf("Enter data to insert at the beginning: ");
                scanf("%d", &data);
                insertAtBeginning(data);
                break;
            case 2:
                printf("Enter data to insert: ");
                scanf("%d", &data);
                printf("Enter position to insert at: ");
                scanf("%d", &position);
                insertAtMiddle(data, position);
                break;
            case 3:
                printf("Enter data to insert at the end: ");
                scanf("%d", &data);
                insertAtEnd(data);
                break;
            case 4:
                deleteAtBeginning();
                break;
            case 5:
                printf("Enter position to delete: ");
                scanf("%d", &position);
                deleteAtPosition(position);
                break;
            case 6:
                deleteAtEnd();
                break;
            case 7:
                displayCircularLinkedList();
                break;
            case 8:
                printf("Enter data to search: ");
                scanf("%d", &data);
                search(data);
                break;
            case 9:
                sort();
                printf("List sorted successfully\n");
                break;
            case 10:
                findMax();
                break;
            case 11:
                findMin();
                break;
            case 12:
                printf("Exiting...\n");
                exit(0);
            default:
                printf("Invalid choice! Please enter a valid choice.\n");
        }
    } while (choice != 12);

    return 0;
}
