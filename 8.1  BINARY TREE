#include <stdio.h>
#include <stdlib.h>


struct Node
{
    int data;
    struct Node* left;
    struct Node* right;
};




struct Node* createNode(int value)
{
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->data = value;
    newNode->left = newNode->right = NULL;
    return newNode;
}




struct Node* insert(struct Node* root, int value)
{
    if (root == NULL)
    {
        return createNode(value);
    }

    if (value < root->data)
    {
        root->left = insert(root->left, value);
    }
    else if (value > root->data)
    {
        root->right = insert(root->right, value);
    }

    return root;
}




struct Node* findMinNode(struct Node* node)
{
    struct Node* current = node;
    while (current && current->left != NULL)
    {
        current = current->left;
    }
    return current;
}




struct Node* deleteNode(struct Node* root, int value)
{
    if (root == NULL)
    {
        return root;
    }

    if (value < root->data)
    {
        root->left = deleteNode(root->left, value);
    }
    else if (value > root->data)
    {
        root->right = deleteNode(root->right, value);
    }
    else
    {
        if (root->left == NULL)
        {
            struct Node* temp = root->right;
            free(root);
            return temp;
        }
        else if (root->right == NULL)
        {
            struct Node* temp = root->left;
            free(root);
            return temp;
        }

        struct Node* temp = findMinNode(root->right);
        root->data = temp->data;
        root->right = deleteNode(root->right, temp->data);
    }
    return root;
}




void inorderTraversal(struct Node* root)
{
    if (root != NULL)
    {
        inorderTraversal(root->left);
        printf("%d ", root->data);
        inorderTraversal(root->right);
    }
}



int main()
{
    printf("BINARY SEARCH TREE\n");
    printf("vvijayalakshmi g,192321080\n");
    printf("--------------------------------\n");
    struct Node* root = NULL;
    int values[] = {50, 30, 70, 20, 40, 60, 80};


    for (int i = 0; i < sizeof(values) / sizeof(values[0]); i++)
    {
        root = insert(root, values[i]);
    }

    printf("Inorder traversal of the BST before deletion:\n");
    inorderTraversal(root);
    printf("\n----------------------------------------------\n");

    int deleteValue = 30;
    root = deleteNode(root, deleteValue);

    printf("Inorder traversal of the BST after deletion of %d:\n", deleteValue);
    inorderTraversal(root);
    printf("\n------------------------------------------------------\n");

    return 0;
}
