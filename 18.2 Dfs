#include <stdio.h>
#include<stdlib.h>
#include <stdbool.h>

#define MAX_VERTICES 100
struct Stack
{
    int items[MAX_VERTICES];
    int top;
};

void initializeStack(struct Stack* stack) {
    stack->top = -1;
}
bool isStackEmpty(struct Stack* stack) {
    return (stack->top == -1);
}
void push(struct Stack* stack, int item) {
    if (stack->top == MAX_VERTICES - 1) {
        printf("Stack overflow!\n");
        return;
    }

    stack->items[++(stack->top)] = item;
}
int pop(struct Stack* stack)
{
    if (isStackEmpty(stack))
    {
        return -1;
    }

    return stack->items[(stack->top)--];
}
struct GraphNode
{
    int data;
    struct GraphNode* next;
};
struct Graph
{
    int vertices;
    struct GraphNode* adjList[MAX_VERTICES];
};
struct GraphNode* createGraphNode(int data)
{
    struct GraphNode* newNode = (struct GraphNode*)malloc(sizeof(struct GraphNode));
    newNode->data = data;
    newNode->next = NULL;
    return newNode;
}
void initializeGraph(struct Graph* graph, int vertices)
{
    graph->vertices = vertices;
    for (int i = 0; i < MAX_VERTICES; i++)
    {
        graph->adjList[i] = NULL;
    }
}
void addEdge(struct Graph* graph, int src, int dest)
{
    struct GraphNode* newNode = createGraphNode(dest);
    newNode->next = graph->adjList[src];
    graph->adjList[src] = newNode;
    newNode = createGraphNode(src);
    newNode->next = graph->adjList[dest];
    graph->adjList[dest] = newNode;
}
void dfs(struct Graph* graph, int startVertex)
{
    bool visited[MAX_VERTICES] = {false};
    struct Stack stack;
    initializeStack(&stack);
    visited[startVertex] = true;
    push(&stack, startVertex);

    printf("Depth-First Search starting from vertex %d:\n", startVertex);

    while (!isStackEmpty(&stack))
    {

        int currentVertex = pop(&stack);
        printf("%d ", currentVertex);
        struct GraphNode* temp = graph->adjList[currentVertex];
        while (temp != NULL) {
            int adjVertex = temp->data;
            if (!visited[adjVertex])
            {
                visited[adjVertex] = true;
                push(&stack, adjVertex);
            }

            temp = temp->next;
        }
    }

    printf("\n");
}

int main()
{
    printf("dfs\n");
    printf("VIJAYALAKSHMI G , 192321080\n");
    printf("\n");
    struct Graph graph;
    initializeGraph(&graph, 5);

    addEdge(&graph, 0, 1);
    addEdge(&graph, 0, 2);
    addEdge(&graph, 1, 3);
    addEdge(&graph, 1, 4);

    dfs(&graph, 0);

    return 0;
}
