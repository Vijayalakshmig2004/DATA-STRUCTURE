#include<stdio.h>
#include<stdlib.h>

struct Node {
    int data;
    struct Node* next;
};

struct Queue {
    struct Node *front, *rear;
};

struct Node* createNode(int data) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->data = data;
    newNode->next = NULL;
    return newNode;
}

struct Queue* createQueue() {
    struct Queue* queue = (struct Queue*)malloc(sizeof(struct Queue));
    queue->front = queue->rear = NULL;
    return queue;
}

void enqueue(struct Queue* queue, int item) {
    struct Node* newNode = createNode(item);
    
    if (queue->rear == NULL) {
        queue->front = queue->rear = newNode;
    } else {

        queue->rear->next = newNode;
        queue->rear = newNode;
    }

    printf("Enqueued: %d\n", item);
}
void dequeue(struct Queue* queue) {
    if (queue->front == NULL) {
        printf("Queue is empty\n");
        return;
    }

    struct Node* temp = queue->front;
    queue->front = queue->front->next;
    if (queue->front == NULL) {
        queue->rear = NULL;
    }

    printf("Dequeued: %d\n", temp->data);
    free(temp);
}

// Function to display the elements of the queue
void display(struct Queue* queue) {
    struct Node* current = queue->front;

    if (current == NULL) {
        printf("Queue is empty.\n");
        return;
    }

    printf("Queue elements: ");
    while (current != NULL) {
        printf("%d ", current->data);
        current = current->next;
    }
    printf("\n");
}
void front(struct Queue* queue) {
    if (queue->front == NULL) {
        printf("Queue is empty.\n");
        return;
    }
    printf("Front element: %d\n", queue->front->data);
}
void rear(struct Queue* queue) {
    if (queue->rear == NULL) {
        printf("Queue is empty.\n");
        return;
    }
    printf("Rear element: %d\n", queue->rear->data);
}

int main() 
{
	printf("VIJAYALAKSHMI G,192321080\n");
    struct Queue* queue = createQueue();
    enqueue(queue, 1);
    enqueue(queue, 2);
    enqueue(queue, 3);
    enqueue(queue, 4);

    display(queue);

    front(queue);
    rear(queue);

    dequeue(queue);
    display(queue);

    front(queue);
    rear(queue);

    return 0;
}
