#include <stdio.h>
#include <stdlib.h>
#define V 5
struct Edge
{
    int src, dest, weight;
};
struct Subset
{
    int parent, rank;
};
int find(struct Subset subsets[], int i);
void Union(struct Subset subsets[], int x, int y);
int compareEdges(const void* a, const void* b);
void kruskalMST(struct Edge graph[]);
int main()
{
    struct Edge graph[] =
    {
        {0, 1, 2},
        {0, 3, 6},
        {1, 2, 3},
        {1, 3, 8},
        {1, 4, 5},
        {2, 4, 7},
        {3, 4, 9}
    };
    printf("VIJAYALAKSHMI G ,192321080\n");
    printf("Minimum Spanning Tree using Kruskal's Algorithm:\n");
    kruskalMST(graph);
    return 0;
}
int find(struct Subset subsets[], int i)
{
    if (subsets[i].parent != i)
        subsets[i].parent = find(subsets, subsets[i].parent);
    return subsets[i].parent;
}
void Union(struct Subset subsets[], int x, int y)
{
    int xroot = find(subsets, x);
    int yroot = find(subsets, y);

    if (subsets[xroot].rank < subsets[yroot].rank)
        subsets[xroot].parent = yroot;
    else if (subsets[xroot].rank > subsets[yroot].rank)
        subsets[yroot].parent = xroot;
    else
    {
        subsets[yroot].parent = xroot;
        subsets[xroot].rank++;
    }
}
int compareEdges(const void* a, const void* b)
{
    return ((struct Edge*)a)->weight - ((struct Edge*)b)->weight;
}
void kruskalMST(struct Edge graph[])
{
    struct Edge result[V];
    int e = 0;
    int i = 0;
    qsort(graph, V, sizeof(graph[0]), compareEdges);
    struct Subset subsets[V];
    for (int v = 0; v < V; v++)
    {
        subsets[v].parent = v;
        subsets[v].rank = 0;
    }
    while (e < V - 1 && i < V)
    {
        struct Edge next_edge = graph[i++];
        int x = find(subsets, next_edge.src);
        int y = find(subsets, next_edge.dest);
        if (x != y)
        {
            result[e++] = next_edge;
            Union(subsets, x, y);
        }
    }
    for (int j = 0; j < e; j++)
        printf("%d - %d    %d\n", result[j].src, result[j].dest, result[j].weight);
}
