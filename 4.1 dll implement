#include<stdio.h>
#include<stdlib.h>
struct node
{
    int data;
    struct node *next,*prev;

}*head,*tail,*n;




void display()
{
    struct node *t;
    t=head;
    if(t==NULL)
    {
        printf("list is empty\n");
        printf("-----------------------------------\n");
        return ;
    }
    printf("linked list : \n");
    while(t!=NULL)
    {
        printf("%d ",t->data);
        t=t->next;
    }
    printf("\n-----------------------------------\n");
}





void insert_begin(int num)
{
    n=(struct node*)malloc(sizeof(struct node));
    n->data=num;
    n->next=NULL;
    n->prev=NULL;
    if(head==NULL)
    {
        head=n;
        tail=n;
    }
    else
    {
        n->next=head;
        n->prev=NULL;
        head->prev=n;
        head=n;
    }
}



void insert_end(int num)
{
    n=(struct node*)malloc(sizeof(struct node));
    n->data=num;
    n->next=NULL;
    n->prev=NULL;
    if(head==NULL)
    {
        head=n;
        tail=n;
    }
    else
    {
        tail->next=n;
        n->prev=tail;
        n->next=NULL;
        tail=n;
    }
}


void insert_middle(int num , int position)
{
    if (position < 0)
    {
        printf("Invalid position\n");
        printf("-------------------------------\n");
        return;
    }

    if (position == 0)
    {
        insert_begin(num);
        return;
    }

    n= (struct node*)malloc(sizeof(struct node));
    n->data = num;

    struct node* t ;
    t= head;
    int count = 0;

    while (count < position - 1 && t != NULL) {
        t = t->next;
        count++;
    }

    if (t == NULL)
    {
        printf("Position out of range\n");
        printf("------------------------------------\n");
        return;
    }

    n->next = t->next;
    t->next = n;
}


void delete_begin()
{
    struct node* t;
    t=head;
    head=t->next;
    head->prev=NULL;
    free(t);
}

void delete_end()
{
    struct node *t;
    t=head;
    while(t->next!=NULL)
    {
        t=t->next;
    }
    tail=t->prev;
    tail->next=NULL;
    free(t);
}

void delete_middle(int position)
{
    if (position < 0)
    {
        printf("Invalid position\n");
        printf("-------------------------------\n");
        return;
    }

    if (position == 0)
    {
        delete_begin();
        return;
    }

    struct node* t;
    t = head;
    struct node* tp;
    tp = NULL;
    int count = 0;

    while (count < position && t != NULL)
    {
        tp = t;
        t = t->next;
        count++;
    }

    if (t == NULL)
    {
        printf("Position out of range\n");
        printf("-------------------------------\n");
        return;
    }

    tp->next = t->next;
    free(t);
}


void search(int num)
{
    struct node* t;
    t = head;
    int position = 0;
    while (t != NULL)
    {
        if (t->data == num)
        {
            printf("%d found at position %d\n",num , position);
            printf("--------------------------------------------\n");
            return;
        }
        t = t->next;
        position++;
    }
    printf("%d not found in the list\n",num);
    printf("---------------------------------------\n");
}




void sort()
{
    struct node *t,*tp;
    int temp=head->data;
    for(t=head;t!=NULL;t=t->next)
    {
        for(tp=t->next;tp!=NULL;tp=tp->next)
        {
            if(t->data > tp->data)
            {
                temp=t->data;
                t->data=tp->data;
                tp->data=temp;
            }
        }
    }
    printf("After sorting : \n");
    for(t=head;t!=NULL;t=t->next)
    {
        printf("%d ",t->data);
    }
    printf("------------------------------------\n");
}



void max_min()
{
    struct node *t;
    int min,max;
    min=max=head->data;
    for(t=head;t!=NULL;t=t->next)
    {
        if(t->data>max)
          max=t->data;
        if(t->data<min)
          max=t->data;
    }
    printf("MAXIMUM = %d ....... MINIMUM = %d ",max,min);
    printf("-------------------------------------------------\n");
}



int main()
{
     printf("Implement DLL \n");
    printf("vijayalakshmi g , 192321080\n");
    struct node* h=NULL;
    int temp,num,position;
    while (1)
    {
        printf("\n1.Display the list : \n");
        printf("2.Insert The List At Beginning : \n");
        printf("3.Insert The List At Middle : \n");
        printf("4.Insert The List At End : \n");
        printf("5.Delete From Begining : \n");
        printf("6.Delete From Middle : \n");
        printf("7.Delete From End : \n");
        printf("8.Search The Element : \n");
        printf("9.Sort the list : \n");
        printf("10.Finding Maximum and Minimum : \n");
        printf("11.Exit \n");
        printf("enter your choice : ");
        scanf("%d",&temp);
        printf("\n---------------------------------\n");
        switch(temp)
        {
            case 1:
                display(h);
                break;
            case 2:
                printf("Enter data to insert at the beginning: ");
                scanf("%d",&num);
                printf("---------------------------------------------\n");
                insert_begin(num);
                break;
            case 3:
                printf("Enter data to insert: ");
                scanf("%d", &num);
                printf("Enter position to insert: ");
                scanf("%d", &position);
                insert_middle(num, position);
                break;
            case 4:
                printf("Enter data to insert at the end: ");
                scanf("%d",&num);
                printf("---------------------------------------------\n");
                insert_end(num);
                break;

            case 5:
                delete_begin();
                printf("deletion at begining successfull \n");
                printf("-------------------------------------\n");
                break;
            case 6:
                printf("Enter position to delete: ");
                scanf("%d", &position);
                printf("--------------------------------\n");
                delete_middle(position);
                break;
            case 7:
                delete_end();
                printf("deletion at end successfull \n");
                printf("-------------------------------------\n");
                break;
            case 8:
                printf("Enter element to search: ");
                scanf("%d", &num);
                search(num);
                break;
            case 9:
               sort();
               break;
            case 10:
               max_min();
               break;
            case 11:
                exit(0);
            default:
                printf("Invalid choice\n");
        }
    }
}


